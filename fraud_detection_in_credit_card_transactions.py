# -*- coding: utf-8 -*-
"""Fraud Detection in Credit Card Transactions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ezNi97MiJpjtfBkRSo6oXwqwOV-j69zg
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# https://www.kaggle.com/mlg-ulb/creditcardfraud

credit_card_data = pd.read_csv('/content/credit_data.csv')

credit_card_data.head()

credit_card_data.tail()

credit_card_data.info()

credit_card_data.isnull().sum()

# distribution of legit transactions & fradulent transactions

credit_card_data['Class'].value_counts()

"""as the dataset is unbalanced like 1% to 99% distribution for each class"""

legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)

print(fraud.shape)

legit.Amount.describe()

fraud.Amount.describe()

# means of fraud transactions are much more than legit transactions

credit_card_data.groupby('Class').mean()



"""Undersampling

Build a sample dataset with similar distribution of normal transactions and fradulent transactions.

Number of Fradulent transactions -- 492
Number of Normal transactions -- should be undersamled to 492
"""

# dealing with unbalanced dataset

legit_sample = legit.sample(n=492)

# concatinate the two datasets with 492 obs

new_dataset = pd.concat([legit_sample, fraud], axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

credit_card_data.groupby('Class').mean()

"""differences are almost remained

Split the data (new_data) into Features and Targets
"""

X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset["Class"]

print(X)

print(Y)

"""Split the data into Train and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=12)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training"""

#Log regression

model = LogisticRegression()

# training the log reg model with train data

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on train data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on Training data: ", training_data_accuracy)

# accuracy on test data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on Test data: ", test_data_accuracy)